
(reset-globals
 (assoc-globals (get-globals)
   :fae.stdlib/def (fexpr def [sym val]
                          (reset-globals
                           (assoc-globals (get-globals)
                                          (keyword :fae.stdlib (:fae.symbol/kw sym))
                                          (eval val))))))

(def first (fn first [lst]
             (if lst
               (:fae.list/head lst)
               :fae.list/!end-of-list)))

(def fnext (fn second [lst]
              (first (next lst))))

(def ffirst (fn ffirst [lst]
              (first (first lst))))

(def next (fn next [lst]
            (if lst
              (:fae.list/tail lst)
              :fae.list/!end-of-list)))


(def let (fexpr let [binds body]
                (eval body {:fae.list/tail *locals*
                            :fae.locals/symbol (:fae.symbol/kw (first binds))
                            :fae.locals/value (eval (fnext binds))})))

(def count-up (fn count-up [x max]
                (if (int< x max)
                  (count-up (int+ x 1) max)
                  x)))

(count-up 0 *input*)